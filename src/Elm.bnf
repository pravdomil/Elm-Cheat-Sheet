Elm ::=
    Application
    | Package

Application ::=
    ElmJson ElmFile+

Package ::=
    ElmJson ElmFile+

ElmJson ::=
    "ElmJson"

ElmFile ::=
    Module

Module ::=
    Definition Import* Declaration+

Definition ::=
    "port"? "module" ModuleName "exposing" "(" (".." | ExposedItem ("," ExposedItem)*) ")"

Import ::=
    "import" ModuleName ("as" ModuleAliasName)? ("exposing" "(" (".." | ExposedItem ("," ExposedItem)*) ")")?

ExposedItem ::=
    TypeName ("(" ".." ")")?
    | ValueName
    | "(" OperatorSymbol ")"

Declaration ::=
    "type" TypeName TypeVariableName* "=" TypeVariantName SingleTypeExpression* ("|" TypeVariantName SingleTypeExpression*)*
    | "type" "alias" TypeName TypeVariableName* "=" TypeExpression
    | ValueName ":" TypeExpression
    | ValueName DestructingPattern* "=" Expression
    | "port" ValueName ":" TypeExpression

TypeExpression ::=
    (SingleTypeExpression | (ModuleName ".")? TypeName (SingleTypeExpression)*)
    ("->" (SingleTypeExpression | (ModuleName ".")? TypeName (SingleTypeExpression)*))*

SingleTypeExpression ::=
    (ModuleName ".")? TypeName
    | TypeVariableName
    | ConstrainedType
    | "(" ")"
    | "(" TypeExpression "," TypeExpression ")"
    | "(" TypeExpression "," TypeExpression "," TypeExpression ")"
    | "{" ((TypeVariableName "|")? (FieldName ":" TypeExpression) ("," FieldName ":" TypeExpression)*)? "}"
    | "(" TypeExpression ")"

Expression ::=
    "let" (ValueName ":" TypeExpression | (ValueName DestructingPattern* | DestructingPattern) "=" Expression)+ "in" Expression
    | "if" Expression "then" Expression ("else" "if" Expression "then" Expression)* "else" Expression
    | "case" Expression "of" (Pattern "->" Expression)+
    | "\\" DestructingPattern+ "->" Expression
    | SingleExpression (OperatorSymbol? SingleExpression)*

SingleExpression ::=
    Number
    | Char
    | String
    | "[" (Expression ("," Expression)*)? "]"
    | "(" ")"
    | "(" Expression "," Expression ")"
    | "(" Expression "," Expression "," Expression ")"
    | "{" ((ValueName "|")? FieldName "=" Expression ("," FieldName "=" Expression)*)? "}" ("." FieldName)*
    | "[glsl|" OpenGLShadingLanguage "|]"

    | (ModuleName ".")? TypeVariantName
    | (ModuleName ".")? ValueName ("." FieldName)*
    | "." FieldName
    | "(" OperatorSymbol ")"

    | "-"? "(" Expression ")" ("." FieldName)*

Pattern ::=
    (SinglePattern ("as" ValueName)? ('::' SinglePattern ("as" ValueName)?)*)

SinglePattern ::=
    TypeVariantName SinglePattern*
    | ValueName
    | "_"
    | Number
    | Char
    | String
    | "[" (Pattern ("," Pattern)*)? "]"
    | "(" ")"
    | "(" Pattern "," Pattern ")"
    | "(" Pattern "," Pattern "," Pattern ")"
    | "{" (FieldName ("," FieldName)*)? "}"
    | "(" Pattern ")"

DestructingPattern ::=
    "(" (ModuleName ".")? TypeVariantName DestructingPattern* ")"
    | (ModuleName ".")? TypeVariantName
    | ValueName
    | "_"
    | "(" ")"
    | "(" DestructingPattern "," DestructingPattern ")"
    | "(" DestructingPattern "," DestructingPattern "," DestructingPattern ")"
    | "{" (FieldName ("," FieldName)*)? "}"
    | "(" DestructingPattern "as" ValueName ")"
    | "(" DestructingPattern ")"

// Literals
Number ::= "Number"
Char ::= "Char"
String ::= "String"
OpenGLShadingLanguage ::= "OpenGLShadingLanguage"

// Names
ModuleName ::= UppercaseName ("." UppercaseName)*
ModuleAliasName ::= UppercaseName

TypeName ::= UppercaseName
TypeVariableName ::= LowercaseName
TypeVariantName ::= UppercaseName
ConstrainedType ::= "number" | "appendable" | "comparable" | "compappend"

ValueName ::= LowercaseName
FieldName ::= LowercaseName

// More names
LowercaseName ::= "LowercaseName" // [a-z] ([0-9A-Za-z_])*
UppercaseName ::= "UppercaseName" // [A-Z] ([0-9A-Za-z_])*
OperatorSymbol ::= ("!" | "$" | "^" | "|" | "*" | "/" | "?" | "+" | "~" | "." | "-" | "=" | "@" | "#" | "%" | "&" | "<" | ">" | ":")+
